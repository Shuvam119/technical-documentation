{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Why We Need Technical Documentation","text":"<p>Technical documentation is a crucial aspect of any product development process. It serves as a comprehensive guide for users, developers, and stakeholders, ensuring that everyone has the information they need to understand and effectively use a product. Here are some key reasons why technical documentation is essential:</p>"},{"location":"#1-facilitates-understanding","title":"1. Facilitates Understanding","text":"<p>Technical documentation provides clear explanations of complex concepts, processes, and systems. It helps users understand how to operate software, use hardware, or follow procedures, reducing confusion and errors.</p>"},{"location":"#2-enhances-user-experience","title":"2. Enhances User Experience","text":"<p>Well-structured documentation improves the overall user experience. Users can find answers to their questions quickly, leading to higher satisfaction and reduced frustration. This can be particularly important for onboarding new users or employees.</p>"},{"location":"#3-ensures-consistency","title":"3. Ensures Consistency","text":"<p>Documentation standardizes processes and procedures. By having a reference point, teams can ensure that everyone follows the same guidelines, which helps maintain quality and consistency across products and services.</p>"},{"location":"#4-supports-maintenance-and-updates","title":"4. Supports Maintenance and Updates","text":"<p>Technical documentation serves as a reference for maintenance and updates. When changes are made to a system or product, documentation helps teams understand the implications and ensures that updates are implemented correctly.</p>"},{"location":"#5-facilitates-collaboration","title":"5. Facilitates Collaboration","text":"<p>In collaborative environments, documentation provides a common language for teams. It allows different stakeholders, such as developers, product managers, and customer support teams, to communicate effectively and work towards shared goals.</p>"},{"location":"#6-helps-with-compliance-and-legal-requirements","title":"6. Helps with Compliance and Legal Requirements","text":"<p>Certain industries require documentation to comply with legal and regulatory standards. Technical documentation can help organizations demonstrate compliance, reducing the risk of legal issues and penalties.</p>"},{"location":"#7-aids-in-training-and-development","title":"7. Aids in Training and Development","text":"<p>Technical documentation serves as a valuable training resource. New employees or users can learn independently by referring to documentation, allowing organizations to streamline training processes.</p>"},{"location":"#conclusion","title":"Conclusion","text":"<p>In summary, technical documentation is not just a supplementary resource; it is an essential component that contributes to the success of products and projects. By providing clear, accurate, and accessible information, technical documentation enhances user experience, supports collaboration, and ensures that everyone involved has the tools they need to succeed.</p>"},{"location":"Admonitions/","title":"Admonitions Example","text":"<p>Title of the callout</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor</p>"},{"location":"Code-Examples/","title":"How to Create a Calculator?","text":"<p>We have used simple <code>html</code>, <code>css</code>, and <code>javascript</code> to create this calculator.</p> <p>Copy and paste this sample code in your text editor and see the magic.</p> calculator.js<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Simple Calculator&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: Arial, sans-serif;\n        }\n        .calculator {\n            width: 200px;\n            margin: 100px auto;\n            padding: 20px;\n            background-color: #f4f4f4;\n            border-radius: 10px;\n            box-shadow: 0 0 20px rgba(0, 0, 0, 0.2);\n        }\n        .display {\n            width: 100%;\n            height: 40px;\n            text-align: right;\n            padding: 10px;\n            background-color: #222;\n            color: white;\n            font-size: 18px;\n            border: none;\n            border-radius: 5px;\n            margin-bottom: 10px;\n        }\n        .buttons {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 10px;\n        }\n        .buttons button {\n            padding: 15px;\n            font-size: 18px;\n            border-radius: 5px;\n            border: none;\n            background-color: #444;\n            color: white;\n            cursor: pointer;\n        }\n        .buttons button:hover {\n            background-color: #666;\n        }\n        .buttons .equal {\n            grid-column: span 4;\n            background-color: #f90;\n        }\n        .buttons .equal:hover {\n            background-color: #fa0;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=\"calculator\"&gt;\n    &lt;input type=\"text\" class=\"display\" id=\"display\" disabled&gt;\n    &lt;div class=\"buttons\"&gt;\n        &lt;button onclick=\"appendNumber('7')\"&gt;7&lt;/button&gt;\n        &lt;button onclick=\"appendNumber('8')\"&gt;8&lt;/button&gt;\n        &lt;button onclick=\"appendNumber('9')\"&gt;9&lt;/button&gt;\n        &lt;button onclick=\"setOperation('/')\"&gt;/&lt;/button&gt;\n\n        &lt;button onclick=\"appendNumber('4')\"&gt;4&lt;/button&gt;\n        &lt;button onclick=\"appendNumber('5')\"&gt;5&lt;/button&gt;\n        &lt;button onclick=\"appendNumber('6')\"&gt;6&lt;/button&gt;\n        &lt;button onclick=\"setOperation('*')\"&gt;*&lt;/button&gt;\n\n        &lt;button onclick=\"appendNumber('1')\"&gt;1&lt;/button&gt;\n        &lt;button onclick=\"appendNumber('2')\"&gt;2&lt;/button&gt;\n        &lt;button onclick=\"appendNumber('3')\"&gt;3&lt;/button&gt;\n        &lt;button onclick=\"setOperation('-')\"&gt;-&lt;/button&gt;\n\n        &lt;button onclick=\"appendNumber('0')\"&gt;0&lt;/button&gt;\n        &lt;button onclick=\"clearDisplay()\"&gt;C&lt;/button&gt;\n        &lt;button onclick=\"setOperation('+')\"&gt;+&lt;/button&gt;\n        &lt;button onclick=\"calculateResult()\"&gt;=&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n    let currentInput = '';\n    let previousInput = '';\n    let operator = '';\n\n    function appendNumber(number) {\n        currentInput += number;\n        document.getElementById('display').value = currentInput;\n    }\n\n    function setOperation(op) {\n        if (currentInput === '') return;\n        operator = op;\n        previousInput = currentInput;\n        currentInput = '';\n    }\n\n    function calculateResult() {\n        if (currentInput === '' || previousInput === '' || operator === '') return;\n        const result = eval(`${previousInput} ${operator} ${currentInput}`);\n        document.getElementById('display').value = result;\n        currentInput = result;\n        operator = '';\n        previousInput = '';\n    }\n\n    function clearDisplay() {\n        currentInput = '';\n        previousInput = '';\n        operator = '';\n        document.getElementById('display').value = '';\n    }\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"Content-Tabs/","title":"Content Tabs","text":""},{"location":"Content-Tabs/#content-tabs","title":"Content Tabs","text":"<p>These are some examples of content tabs.</p>"},{"location":"Content-Tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"Content-Tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"Sample/","title":"How to Install Python on Windows","text":""},{"location":"Sample/#step-1-download-python","title":"Step 1: Download Python","text":"<ol> <li>Go to the official Python website: python.org/downloads.</li> <li>Click on the Download Python button (the latest version will be shown).</li> <li>This will download the Python installer (<code>.exe</code>) file.</li> </ol>"},{"location":"Sample/#step-2-run-the-installer","title":"Step 2: Run the Installer","text":"<ol> <li>Open the downloaded installer.</li> <li>Important: Check the box that says Add Python to PATH.</li> <li>Click on Install Now to begin the installation.</li> </ol>"},{"location":"Sample/#step-3-verify-installation","title":"Step 3: Verify Installation","text":"<ol> <li>After the installation is complete, open Windows PowerShell or Command Prompt.</li> <li>Type the following command to check the Python version:</li> </ol> <p><code>bash    python --version</code></p> Lorem Ipsum <p>Lorem impsum dolor Lorem impsum dolor  Lorem impsum dolor  Lorem impsum dolor Lorem impsum dolor</p> <p>Title</p> <p>Lorem ipsum dolor</p>"},{"location":"process-of-writing-tech-doc/","title":"Process of Writing a Technical Documentation","text":"<pre><code>sequenceDiagram\n    participant TechnicalWriter as Technical Writer\n    participant SME as Subject Matter Expert\n    participant Reviewer\n    participant Audience\n\n    TechnicalWriter-&gt;&gt;SME: Gather information\n    SME--&gt;&gt;TechnicalWriter: Provide insights\n    TechnicalWriter-&gt;&gt;TechnicalWriter: Outline structure\n    TechnicalWriter-&gt;&gt;TechnicalWriter: Draft content\n    TechnicalWriter-&gt;&gt;Reviewer: Submit draft for review\n    Reviewer--&gt;&gt;TechnicalWriter: Provide feedback\n    TechnicalWriter-&gt;&gt;TechnicalWriter: Revise content\n    TechnicalWriter-&gt;&gt;TechnicalWriter: Format and design\n    TechnicalWriter-&gt;&gt;Reviewer: Final review\n    Reviewer--&gt;&gt;TechnicalWriter: Approval\n    TechnicalWriter-&gt;&gt;Audience: Publish and distribute\n    Audience-&gt;&gt;TechnicalWriter: Provide feedback\n    TechnicalWriter-&gt;&gt;TechnicalWriter: Update documentation</code></pre>"},{"location":"static-sites/","title":"What is a Static Site?","text":"<p>A static site is a collection of pre-built web pages delivered to users exactly as stored on the server. Unlike dynamic websites, static sites don't rely on server-side processing, making them faster and more secure. They are composed of fixed HTML, CSS, and JavaScript files.</p> <p></p>"},{"location":"static-sites/#using-static-sites-for-documentation","title":"Using Static Sites for Documentation","text":"<p>Static sites are ideal for documentation because:</p> <ul> <li>Fast: No need for backend processing.</li> <li>Simple: Content is easy to maintain with Markdown.</li> <li>Version Control: Works well with Git.</li> </ul>"},{"location":"static-sites/#some-popular-static-site-generators","title":"Some Popular Static Site Generators","text":"<ul> <li>Jekyll: A popular static site generator built with Ruby, widely used for GitHub Pages.</li> <li>Hugo: Fast and flexible, written in Go, suitable for websites of all sizes.</li> <li>MkDocs: A Python-based static site generator ideal for project documentation. </li> </ul> <p>Note:</p> <p>Material for MKdocs is an added layer. </p> <ul> <li>Gatsby: A React-based framework, great for creating dynamic websites with static elements.</li> <li>Docusaurus: Designed for documentation websites, built with React.</li> </ul>"}]}